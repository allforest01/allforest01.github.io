[{"categories":[],"content":" Quote z3 seem like magic to me. The harder it is, the more I want to learn it. ","date":"2023-08-02","objectID":"/learning-z3-with-me/:0:0","tags":["learning"],"title":"Learning z3 with me","uri":"/learning-z3-with-me/"},{"categories":[],"content":"What is z3 Info “Z3 is an efficient Satisfiability Modulo Theories (SMT) solver from Microsoft Research. Z3 is a solver for symbolic logic, a foundation for many software engineering tools. SMT solvers rely on a tight integration of specialized engines of proof. Each engine owns a piece of the global puzzle and implements specialized algorithms.” ","date":"2023-08-02","objectID":"/learning-z3-with-me/:1:0","tags":["learning"],"title":"Learning z3 with me","uri":"/learning-z3-with-me/"},{"categories":[],"content":"An easy examples Suppose I have this crack-me, and you want to crack it. How can you do that? #include \u003cstdio.h\u003e using namespace std; int main() { long long num; printf(\"num = \"); scanf(\"%lld\", \u0026num); int digitSum = 0, len = 0; while (num \u003e 0) { digitSum += num % 10; num /= 10; len++; } if (len == 17 \u0026\u0026 digitSum == 123) { puts(\"Correct!\"); } else { puts(\"Wrong!\"); } } The condition are straightforward, so you can break it through manual condition. However, let’s use this as a starting example. You can solve it using z3, like this: # Import the z3 library from z3 import * # Optimize API provides methods for solving using # objective functions and weighted soft constraints opt = Optimize() # Given the condition from line 17 of the code above we know that `len` = 17 # The list `digits` will store all the num_{i} for i in [0, 17) # where num_{i} represents the i-th digit of `num` digits = [] # Loop through all digits for i in range(17): # Create the lable num_{i} with an integer type num_i = Int(f'num_{i}') # Add conditions for this lable # Each digit will have value in [0, 9] # except the first one, which will have a value in (0, 9] if i == 0: opt.add(num_i \u003e 0) else: opt.add(num_i \u003e= 0) opt.add(num_i \u003c= 9) # Save the lable to the list digits.append(num_i) # Create the label digitSum, which equal the sum of all digits digitSum = Int('digitSum') opt.add(digitSum == sum(digits)) # Add the condition digitSum == 123, as we decuded from the code above opt.add(digitSum == 123) # Check if a model that satisfies the condition is solvable if opt.check() == sat: # Print the answer from the model model = opt.model() print('Answer:', end=' ') print(''.join([chr(model[i].as_long() + ord('0')) for i in digits])) else: # When there is no answer print('No answer!') Upon running the script, you’ll obtain the answer: Answer: 99996999999199800 Testing this with the crack-me: num = 99996999999199800 Correct! ","date":"2023-08-02","objectID":"/learning-z3-with-me/:2:0","tags":["learning"],"title":"Learning z3 with me","uri":"/learning-z3-with-me/"},{"categories":[],"content":"Apply it to a CTF Task Now let’s solve the collision task on pwnable.kr. I initially solved it through manual calculation, but now let’s have some fun with z3. The problem statement: Info Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest) Okay let’s connect to the server and retrive the source code: allforest01@Kiese ~ » (base) ssh col@pwnable.kr -p2222 col@pwnable.kr's password: ____ __ __ ____ ____ ____ _ ___ __ _ ____ | \\| |__| || \\ / || \\ | | / _] | |/ ]| \\ | o ) | | || _ || o || o )| | / [_ | ' / | D ) | _/| | | || | || || || |___ | _] | \\ | / | | | ` ' || | || _ || O || || [_ __ | \\| \\ | | \\ / | | || | || || || || || . || . \\ |__| \\_/\\_/ |__|__||__|__||_____||_____||_____||__||__|\\_||__|\\_| - Site admin : daehee87@khu.ac.kr - irc.netgarage.org:6667 / #pwnable.kr - Simply type \"irssi\" command to join IRC now - files under /tmp can be erased anytime. make your directory under /tmp - to use peda, issue `source /usr/share/peda/peda.py` in gdb terminal You have mail. Last login: Wed Aug 2 09:51:46 2023 from 171.225.250.124 col@pwnable:~$ ls col col.c flag col@pwnable:~$ cat col.c #include \u003cstdio.h\u003e #include \u003cstring.h\u003e unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i\u003c5; i++){ res += ip[i]; } return res; } int main(int argc, char* argv[]){ if(argc\u003c2){ printf(\"usage : %s [passcode]\\n\", argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(\"passcode length should be 20 bytes\\n\"); return 0; } if(hashcode == check_password( argv[1] )){ system(\"/bin/cat flag\"); return 0; } else printf(\"wrong passcode.\\n\"); return 0; } col@pwnable:~$ _ We will focus on this section of the source code: unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i\u003c5; i++){ res += ip[i]; } return res; } This function converts char* to int*, requiring us to convert 4-byte chars to int when calculating. And yeah this problem bears resemblance to the one we disscussed earlier. Let’s use z3 to compute the password. from z3 import * # This function converts 4 consecutive bytes to an int def four_char_to_int(arr): # The arr must be 4 bytes in length assert len(arr) == 4 # Just perform a base conversion ret = 0 for i in reversed(range(4)): ret = ret * 256 + arr[i] return ret opt = Optimize() # This list stores the resulting lables result = [] for i in range(20): char_i = Int(f'char_{i}') # Character condition opt.add(char_i \u003e= 0x20) opt.add(char_i \u003c 0x7f) result.append(char_i) # This list stores all the converted numbers numbers = [] for i in range(0, 20, 4): # Convert 4 consecutive bytes to an int number = four_char_to_int(result[i : i + 4]) numbers.append(number) mySum = Int('mySum') # Attention: Integer overflow !!! opt.add(mySum == sum(numbers) % 0x100000000) # Add the task condition opt.add(mySum == 0x21DD09EC) if opt.check() == sat: model = opt.model() print('Password:', end=' ') print(''.join([chr(model[i].as_long()) for i in result])) else: print('No answer!') Upon running this script, you’ll get the password: Password: ex;oYe~q\u003c8[tt{Jp~x}\\ Now, let’s retrive the flag using this password: Tip You will need to replace ;, \u003c, \\ with \\;, \\\u003c, \\\\. col@pwnable:~$ ./col ex\\;oYe~q\\\u003c8[tt{Jp~x}\\\\ daddy! I just managed to create a hash collision :) col@pwnable:~$ _ [This posts is currently being updated…] ","date":"2023-08-02","objectID":"/learning-z3-with-me/:3:0","tags":["learning"],"title":"Learning z3 with me","uri":"/learning-z3-with-me/"},{"categories":[],"content":"rev-basic-4 The challenge is too easy to explain so… here is my code: #include \u003ciostream\u003e #include \u003cmap\u003e using namespace std; int main() { map\u003cuint8_t, char\u003e memory; for (uint8_t i = 0x20; i \u003c 0x7f; i++) { memory[(i * 16) | (i \u003e\u003e 4)] = char(i); } uint8_t flag[28] = {0x24, 0x27, 0x13, 0xC6, 0xC6, 0x13, 0x16, 0xE6, 0x47, 0xF5, 0x26, 0x96, 0x47, 0x0F5, 0x46, 0x27, 0x13, 0x26, 0x26, 0x0C6, 0x56, 0xF5, 0xC3, 0xC3, 0xF5, 0xE3, 0xE3}; for (int i = 0; i \u003c 28; i++) { cout \u003c\u003c memory[flag[i]]; } cout \u003c\u003c '\\n'; } Warning The only thing you need to be careful with is the uint8_t. ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:1:0","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":[],"content":"rev-basic-5 At first, I tried a brute-force approach. Howerver, it was quite challenging to see the flag. #include \u003ciostream\u003e #include \u003cmap\u003e using namespace std; int main() { uint8_t flag_enc[23] = {173, 216, 203, 203, 157, 151, 203, 196, 146, 161, 210, 215, 210, 214, 168, 165, 220, 199, 173, 163, 161, 152, 76}; char flag_dec[24]; for (char fi = 0x20; fi \u003c 0x7e; fi++) { flag_dec[0] = fi; for (int i = 1; i \u003c 24; i++) { flag_dec[i] = flag_enc[i - 1] - flag_dec[i - 1]; } for (int i = 0; i \u003c 24; i++) { cout \u003c\u003c flag_dec[i]; } cout \u003c\u003c '\\n'; } cout \u003c\u003c '\\n'; } Later, I saw the flag and reliazed… ?njaj3dg]5lfqau3rj]PSNJ @mk`k2ef^4mer`v2si^OTMK All_l1fe_3nds_w1th_NULL Bkm^m0gd`2oct^x0ug`MVKM� Cjn]n/hca1pbu]y/vfaLWJN� To print only the valid flag, we can use this code snippet: if (flag_dec[23] == 0) { cout \u003c\u003c flag_dec \u003c\u003c '\\n'; } Alternatively, a better approach would be: #include \u003ciostream\u003e using namespace std; int main() { int flag_enc[23] = {173, 216, 203, 203, 157, 151, 203, 196, 146, 161, 210, 215, 210, 214, 168, 165, 220, 199, 173, 163, 161, 152, 76}; int flag_dec[24]; flag_dec[23] = 0; for (int i = 22; i \u003e= 0; i--) { flag_dec[i] = flag_enc[i] - flag_dec[i + 1]; } for (int i = 0; i \u003c 24; i++) { cout \u003c\u003c char(flag_dec[i]); } cout \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:2:0","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":[],"content":"rev-basic-6 After disassembling the file, you will easily see that the flag checker part is: __int64 __fastcall sub_140001000(__int64 a1) { int i; // [rsp+0h] [rbp-18h] for ( i = 0; (unsigned __int64)i \u003c 0x12; ++i ) { if ( byte_140003020[*(unsigned __int8 *)(a1 + i)] != byte_140003000[i] ) return 0i64; } return 1i64; } You can take a look at the memory at byte_140003020: 0000000140003020 63 7C 77 7B F2 6B 6F C5 30 01 67 2B FE D7 AB 76 0000000140003030 CA 82 C9 7D FA 59 47 F0 AD D4 A2 AF 9C A4 72 C0 0000000140003040 B7 FD 93 26 36 3F F7 CC 34 A5 E5 F1 71 D8 31 15 0000000140003050 04 C7 23 C3 18 96 05 9A 07 12 80 E2 EB 27 B2 75 0000000140003060 09 83 2C 1A 1B 6E 5A A0 52 3B D6 B3 29 E3 2F 84 0000000140003070 53 D1 00 ED 20 FC B1 5B 6A CB BE 39 4A 4C 58 CF 0000000140003080 D0 EF AA FB 43 4D 33 85 45 F9 02 7F 50 3C 9F A8 0000000140003090 51 A3 40 8F 92 9D 38 F5 BC B6 DA 21 10 FF F3 D2 00000001400030A0 CD 0C 13 EC 5F 97 44 17 C4 A7 7E 3D 64 5D 19 73 00000001400030B0 60 81 4F DC 22 2A 90 88 46 EE B8 14 DE 5E 0B DB 00000001400030C0 E0 32 3A 0A 49 06 24 5C C2 D3 AC 62 91 95 E4 79 00000001400030D0 E7 C8 37 6D 8D D5 4E A9 6C 56 F4 EA 65 7A AE 08 00000001400030E0 BA 78 25 2E 1C A6 B4 C6 E8 DD 74 1F 4B BD 8B 8A 00000001400030F0 70 3E B5 66 48 03 F6 0E 61 35 57 B9 86 C1 1D 9E 0000000140003100 E1 F8 98 11 69 D9 8E 94 9B 1E 87 E9 CE 55 28 DF 0000000140003110 8C A1 89 0D BF E6 42 68 41 99 2D 0F B0 54 BB 16 Now, let’s write the script to decrypt the flag: from pwn import * with open('../bin/chall6.exe', 'rb') as f: file_data = f.read() start_pos = file_data.find(b'\\x63\\x7C\\x77\\x7B\\xF2\\x6B\\x6F\\xC5') table = file_data[start_pos : start_pos + 128] flag = [0x0, 0x4D, 0x51, 0x50, 0x0EF, 0x0FB, 0x0C3, 0x0CF, 0x92, 0x45, 0x4D, 0x0CF, 0x0F5, 0x4, 0x40, 0x50, 0x43, 0x63] reverse = dict() for i in range(128): reverse[table[i]] = i print(''.join([chr(reverse[i]) for i in flag])[:-1]) # [:-1] to remove \\x00 at the end ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:3:0","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":[],"content":"rev-basic -7 ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:4:0","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":[],"content":"IDA After disassembling with IDA, I noticed a function called __ROL1__() (which seems unfamiliar to me): __int64 __fastcall sub_140001000(__int64 a1) { int i; // [rsp+0h] [rbp-18h] for ( i = 0; (unsigned __int64)i \u003c 31; ++i ) { if ( (i ^ (unsigned __int8)__ROL1__(*(_BYTE *)(a1 + i), i \u0026 7)) != byte_140003000[i] ) return 0i64; } return 1i64; } Open [your_ida_dir]\\plugins\\hexrays_sdk\\include\\defs.h and you will see the implementation and the purpose of this function: // rotate left template\u003cclass T\u003e T __ROL__(T value, int count) { const uint nbits = sizeof(T) * 8; if ( count \u003e 0 ) { count %= nbits; T high = value \u003e\u003e (nbits - count); if ( T(-1) \u003c 0 ) // signed value high \u0026= ~((T(-1) \u003c\u003c count)); value \u003c\u003c= count; value |= high; } else { count = -count % nbits; T low = value \u003c\u003c (nbits - count); value \u003e\u003e= count; value |= low; } return value; } inline uint8 __ROL1__(uint8 value, int count) { return __ROL__((uint8)value, count); } inline uint16 __ROL2__(uint16 value, int count) { return __ROL__((uint16)value, count); } inline uint32 __ROL4__(uint32 value, int count) { return __ROL__((uint32)value, count); } inline uint64 __ROL8__(uint64 value, int count) { return __ROL__((uint64)value, count); } inline uint8 __ROR1__(uint8 value, int count) { return __ROL__((uint8)value, -count); } inline uint16 __ROR2__(uint16 value, int count) { return __ROL__((uint16)value, -count); } inline uint32 __ROR4__(uint32 value, int count) { return __ROL__((uint32)value, -count); } inline uint64 __ROR8__(uint64 value, int count) { return __ROL__((uint64)value, -count); } Note The function __ROL1__() rotates the unsigned __int8 value by count bits to the left. So just use the function __ROR1__() to reverse the flag from byte_140003000: #include \u003ciostream\u003e using namespace std; template\u003cclass T\u003e T __ROL__(T value, int count) { const uint nbits = sizeof(T) * 8; if ( count \u003e 0 ) { count %= nbits; T high = value \u003e\u003e (nbits - count); if ( T(-1) \u003c 0 ) // signed value high \u0026= ~((T(-1) \u003c\u003c count)); value \u003c\u003c= count; value |= high; } else { count = -count % nbits; T low = value \u003c\u003c (nbits - count); value \u003e\u003e= count; value |= low; } return value; } inline uint8_t __ROL1__(uint8_t value, int count) { return __ROL__((uint8_t)value, count); } inline uint8_t __ROR1__(uint8_t value, int count) { return __ROL__((uint8_t)value, -count); } int main() { uint8_t flag[32] = {0x52, 0xDF, 0xB3, 0x60, 0xF1, 0x8B, 0x1C, 0xB5, 0x57, 0xD1, 0x9F, 0x38, 0x4B, 0x29, 0xD9, 0x26, 0x7F, 0xC9, 0xA3, 0xE9, 0x53, 0x18, 0x4F, 0xB8, 0x6A, 0xCB, 0x87, 0x58, 0x5B, 0x39, 0x1E, 0x00}; for (int i = 0; i \u003c 31; i++) { flag[i] = char(__ROR1__(flag[i] ^ i, i \u0026 7)); } cout \u003c\u003c flag \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:4:1","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":[],"content":"Ghidra If you disassemble with Ghidra, you will get: undefined8 FUN_140001000(longlong param_1) { byte bVar1; uint local_18; local_18 = 0; while( true ) { if (30 \u003c local_18) { return 1; } bVar1 = (byte)local_18 \u0026 7; if (((byte)(*(byte *)(param_1 + (int)local_18) \u003c\u003c bVar1 | *(byte *)(param_1 + (int)local_18) \u003e\u003e 8 - bVar1) ^ local_18) != (uint)(byte)(\u0026DAT_140003000)[(int)local_18]) break; local_18 = local_18 + 1; } return 0; } Here is my reverse for this: #include \u003ciostream\u003e using namespace std; int main() { uint8_t flag[32] = {0x52, 0xDF, 0xB3, 0x60, 0xF1, 0x8B, 0x1C, 0xB5, 0x57, 0xD1, 0x9F, 0x38, 0x4B, 0x29, 0xD9, 0x26, 0x7F, 0xC9, 0xA3, 0xE9, 0x53, 0x18, 0x4F, 0xB8, 0x6A, 0xCB, 0x87, 0x58, 0x5B, 0x39, 0x1E, 0x00}; for (int i = 0; i \u003c 31; i++) { uint8_t j = i \u0026 7, x = flag[i] ^ i; flag[i] = (x \u003e\u003e j) | (x \u003c\u003c (8 - j)); } cout \u003c\u003c flag \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-basic-rev/:4:2","tags":["reversing"],"title":"[dreamhack.io] Basic Reversing Challenges","uri":"/dreamhack-basic-rev/"},{"categories":null,"content":"Having a burning love for Elaina ﾉ*:･ﾟ✧ ","date":"2023-07-31","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Contact me: https://www.facebook.com/allforest01/ ","date":"2023-07-31","objectID":"/about/:0:1","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Dreamhack: https://dreamhack.io/users/41917/ ","date":"2023-07-31","objectID":"/about/:0:2","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Codeforces: https://codeforces.com/profile/PurpleWhale/ ","date":"2023-07-31","objectID":"/about/:0:3","tags":null,"title":"","uri":"/about/"},{"categories":[],"content":" Info I created this blog to write about anything I love in English, although my English is not very strong. Therefore, I will be using ChatGPT to help me improve my grammar. The subjects I can write about in the future include coding, reversing, pwning or writing novels, etc. Success I hope you enjoy my blog! ","date":"2023-07-31","objectID":"/first-post/:0:0","tags":["misc"],"title":"This is my first post on my first blog","uri":"/first-post/"}]