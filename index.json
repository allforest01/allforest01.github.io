[{"categories":[],"content":"rev-basic-4 It’s too easy to explain so… here is my code: #include \u003ciostream\u003e #include \u003cmap\u003e using namespace std; int main() { map\u003cuint8_t, char\u003e memory; for (uint8_t i = 0x20; i \u003c 0x7f; i++) { memory[(i * 16) | (i \u003e\u003e 4)] = char(i); } uint8_t flag[28] = {0x24, 0x27, 0x13, 0xC6, 0xC6, 0x13, 0x16, 0xE6, 0x47, 0xF5, 0x26, 0x96, 0x47, 0x0F5, 0x46, 0x27, 0x13, 0x26, 0x26, 0x0C6, 0x56, 0xF5, 0xC3, 0xC3, 0xF5, 0xE3, 0xE3}; for (int i = 0; i \u003c 28; i++) { cout \u003c\u003c memory[flag[i]]; } cout \u003c\u003c '\\n'; } Warning The only thing you need is to be careful with uint8_t. ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:1:0","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":[],"content":"rev-basic-5 At first, I tried brute-force approach. It’s quite hard to see the flag. #include \u003ciostream\u003e #include \u003cmap\u003e using namespace std; int main() { uint8_t flag_enc[23] = {173, 216, 203, 203, 157, 151, 203, 196, 146, 161, 210, 215, 210, 214, 168, 165, 220, 199, 173, 163, 161, 152, 76}; char flag_dec[24]; for (char fi = 0x20; fi \u003c 0x7e; fi++) { flag_dec[0] = fi; for (int i = 1; i \u003c 24; i++) { flag_dec[i] = flag_enc[i - 1] - flag_dec[i - 1]; } for (int i = 0; i \u003c 24; i++) { cout \u003c\u003c flag_dec[i]; } cout \u003c\u003c '\\n'; } cout \u003c\u003c '\\n'; } Then I saw it and I reliazed… ?njaj3dg]5lfqau3rj]PSNJ @mk`k2ef^4mer`v2si^OTMK All_l1fe_3nds_w1th_NULL Bkm^m0gd`2oct^x0ug`MVKM� Cjn]n/hca1pbu]y/vfaLWJN� We can write code like this to print only valid flag: if (flag_dec[23] == 0) { cout \u003c\u003c flag_dec \u003c\u003c '\\n'; } Better approach: #include \u003ciostream\u003e using namespace std; int main() { int flag_enc[23] = {173, 216, 203, 203, 157, 151, 203, 196, 146, 161, 210, 215, 210, 214, 168, 165, 220, 199, 173, 163, 161, 152, 76}; int flag_dec[24]; flag_dec[23] = 0; for (int i = 22; i \u003e= 0; i--) { flag_dec[i] = flag_enc[i] - flag_dec[i + 1]; } for (int i = 0; i \u003c 24; i++) { cout \u003c\u003c char(flag_dec[i]); } cout \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:2:0","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":[],"content":"rev-basic-6 Disassemble the file and you will easily see that the flag checker part is __int64 __fastcall sub_140001000(__int64 a1) { int i; // [rsp+0h] [rbp-18h] for ( i = 0; (unsigned __int64)i \u003c 0x12; ++i ) { if ( byte_140003020[*(unsigned __int8 *)(a1 + i)] != byte_140003000[i] ) return 0i64; } return 1i64; } Take a look on the memory at byte_140003020 0000000140003020 63 7C 77 7B F2 6B 6F C5 30 01 67 2B FE D7 AB 76 0000000140003030 CA 82 C9 7D FA 59 47 F0 AD D4 A2 AF 9C A4 72 C0 0000000140003040 B7 FD 93 26 36 3F F7 CC 34 A5 E5 F1 71 D8 31 15 0000000140003050 04 C7 23 C3 18 96 05 9A 07 12 80 E2 EB 27 B2 75 0000000140003060 09 83 2C 1A 1B 6E 5A A0 52 3B D6 B3 29 E3 2F 84 0000000140003070 53 D1 00 ED 20 FC B1 5B 6A CB BE 39 4A 4C 58 CF 0000000140003080 D0 EF AA FB 43 4D 33 85 45 F9 02 7F 50 3C 9F A8 0000000140003090 51 A3 40 8F 92 9D 38 F5 BC B6 DA 21 10 FF F3 D2 00000001400030A0 CD 0C 13 EC 5F 97 44 17 C4 A7 7E 3D 64 5D 19 73 00000001400030B0 60 81 4F DC 22 2A 90 88 46 EE B8 14 DE 5E 0B DB 00000001400030C0 E0 32 3A 0A 49 06 24 5C C2 D3 AC 62 91 95 E4 79 00000001400030D0 E7 C8 37 6D 8D D5 4E A9 6C 56 F4 EA 65 7A AE 08 00000001400030E0 BA 78 25 2E 1C A6 B4 C6 E8 DD 74 1F 4B BD 8B 8A 00000001400030F0 70 3E B5 66 48 03 F6 0E 61 35 57 B9 86 C1 1D 9E 0000000140003100 E1 F8 98 11 69 D9 8E 94 9B 1E 87 E9 CE 55 28 DF 0000000140003110 8C A1 89 0D BF E6 42 68 41 99 2D 0F B0 54 BB 16 Now let write the script to decrypt the flag: from pwn import * with open('../bin/chall6.exe', 'rb') as f: file_data = f.read() start_pos = file_data.find(b'\\x63\\x7C\\x77\\x7B\\xF2\\x6B\\x6F\\xC5') table = file_data[start_pos : start_pos + 128] flag = [0x0, 0x4D, 0x51, 0x50, 0x0EF, 0x0FB, 0x0C3, 0x0CF, 0x92, 0x45, 0x4D, 0x0CF, 0x0F5, 0x4, 0x40, 0x50, 0x43, 0x63] reverse = dict() for i in range(128): reverse[table[i]] = i print(''.join([chr(reverse[i]) for i in flag])[:-1]) # [:-1] to remove \\x00 at the end ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:3:0","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":[],"content":"rev-basic -7 ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:4:0","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":[],"content":"IDA After disassemble with IDA, I notice a strange function __ROL1__(): __int64 __fastcall sub_140001000(__int64 a1) { int i; // [rsp+0h] [rbp-18h] for ( i = 0; (unsigned __int64)i \u003c 31; ++i ) { if ( (i ^ (unsigned __int8)__ROL1__(*(_BYTE *)(a1 + i), i \u0026 7)) != byte_140003000[i] ) return 0i64; } return 1i64; } Open [your_ida_dir]\\plugins\\hexrays_sdk\\include\\defs.h and you will see the implementation and the purpose of this function: // rotate left template\u003cclass T\u003e T __ROL__(T value, int count) { const uint nbits = sizeof(T) * 8; if ( count \u003e 0 ) { count %= nbits; T high = value \u003e\u003e (nbits - count); if ( T(-1) \u003c 0 ) // signed value high \u0026= ~((T(-1) \u003c\u003c count)); value \u003c\u003c= count; value |= high; } else { count = -count % nbits; T low = value \u003c\u003c (nbits - count); value \u003e\u003e= count; value |= low; } return value; } inline uint8 __ROL1__(uint8 value, int count) { return __ROL__((uint8)value, count); } inline uint16 __ROL2__(uint16 value, int count) { return __ROL__((uint16)value, count); } inline uint32 __ROL4__(uint32 value, int count) { return __ROL__((uint32)value, count); } inline uint64 __ROL8__(uint64 value, int count) { return __ROL__((uint64)value, count); } inline uint8 __ROR1__(uint8 value, int count) { return __ROL__((uint8)value, -count); } inline uint16 __ROR2__(uint16 value, int count) { return __ROL__((uint16)value, -count); } inline uint32 __ROR4__(uint32 value, int count) { return __ROL__((uint32)value, -count); } inline uint64 __ROR8__(uint64 value, int count) { return __ROL__((uint64)value, -count); } Note The function __ROL1__() rotate the unsigned __int8 value by count bit to the left. So just use the function __ROR1__() to reverse the flag from byte_140003000. #include \u003ciostream\u003e using namespace std; template\u003cclass T\u003e T __ROL__(T value, int count) { const uint nbits = sizeof(T) * 8; if ( count \u003e 0 ) { count %= nbits; T high = value \u003e\u003e (nbits - count); if ( T(-1) \u003c 0 ) // signed value high \u0026= ~((T(-1) \u003c\u003c count)); value \u003c\u003c= count; value |= high; } else { count = -count % nbits; T low = value \u003c\u003c (nbits - count); value \u003e\u003e= count; value |= low; } return value; } inline uint8_t __ROL1__(uint8_t value, int count) { return __ROL__((uint8_t)value, count); } inline uint8_t __ROR1__(uint8_t value, int count) { return __ROL__((uint8_t)value, -count); } int main() { uint8_t flag[32] = {0x52, 0xDF, 0xB3, 0x60, 0xF1, 0x8B, 0x1C, 0xB5, 0x57, 0xD1, 0x9F, 0x38, 0x4B, 0x29, 0xD9, 0x26, 0x7F, 0xC9, 0xA3, 0xE9, 0x53, 0x18, 0x4F, 0xB8, 0x6A, 0xCB, 0x87, 0x58, 0x5B, 0x39, 0x1E, 0x00}; for (int i = 0; i \u003c 31; i++) { flag[i] = char(__ROR1__(flag[i] ^ i, i \u0026 7)); } cout \u003c\u003c flag \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:4:1","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":[],"content":"Ghidra If you disassemble with Ghidra, you will get: undefined8 FUN_140001000(longlong param_1) { byte bVar1; uint local_18; local_18 = 0; while( true ) { if (30 \u003c local_18) { return 1; } bVar1 = (byte)local_18 \u0026 7; if (((byte)(*(byte *)(param_1 + (int)local_18) \u003c\u003c bVar1 | *(byte *)(param_1 + (int)local_18) \u003e\u003e 8 - bVar1) ^ local_18) != (uint)(byte)(\u0026DAT_140003000)[(int)local_18]) break; local_18 = local_18 + 1; } return 0; } My reverse for this: #include \u003ciostream\u003e using namespace std; int main() { uint8_t flag[32] = {0x52, 0xDF, 0xB3, 0x60, 0xF1, 0x8B, 0x1C, 0xB5, 0x57, 0xD1, 0x9F, 0x38, 0x4B, 0x29, 0xD9, 0x26, 0x7F, 0xC9, 0xA3, 0xE9, 0x53, 0x18, 0x4F, 0xB8, 0x6A, 0xCB, 0x87, 0x58, 0x5B, 0x39, 0x1E, 0x00}; for (int i = 0; i \u003c 31; i++) { uint8_t j = i \u0026 7, x = flag[i] ^ i; flag[i] = (x \u003e\u003e j) | (x \u003c\u003c (8 - j)); } cout \u003c\u003c flag \u003c\u003c '\\n'; } ","date":"2023-07-31","objectID":"/dreamhack-rev-basic/:4:2","tags":["rev"],"title":"[dreamhack.io] Reversing Basic Challenges","uri":"/dreamhack-rev-basic/"},{"categories":null,"content":"Have a burning love for Elaina ﾉ*:･ﾟ✧ ","date":"2023-07-31","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Contact me: https://www.facebook.com/allforest01/ ","date":"2023-07-31","objectID":"/about/:0:1","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Dreamhack: https://dreamhack.io/users/41917/ ","date":"2023-07-31","objectID":"/about/:0:2","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"Codeforces: https://codeforces.com/profile/PurpleWhale/ ","date":"2023-07-31","objectID":"/about/:0:3","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":" print('Nothing here...') ","date":"2023-07-31","objectID":"/first_post/:0:0","tags":null,"title":"This is my first post on my first blog","uri":"/first_post/"}]